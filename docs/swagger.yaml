basePath: /
definitions:
  entity.Book:
    properties:
      authors:
        example: Miranda De Moura
        type: string
      id:
        example: KNYxEAAAQBAJ
        type: string
      publisher:
        example: Clube de Autores
        type: string
      title:
        example: Viagens Na Madrugada
        type: string
    type: object
  entity.BooksDTO:
    properties:
      books:
        items:
          $ref: '#/definitions/entity.Book'
        type: array
      items:
        example: 20
        type: integer
      results:
        example: 999
        type: integer
    type: object
  entity.FailureResponse:
    properties:
      details:
        example: Message error for developers
        type: string
      message:
        example: Message error for users
        type: string
      status:
        example: failure
        type: string
    type: object
  entity.SuccessResponse:
    properties:
      details:
        example: operation completed
        type: string
      message:
        example: ok
        type: string
      success:
        example: true
        type: boolean
    type: object
  entity.User:
    properties:
      password:
        example: Pantufla1234
        type: string
      username:
        example: Pantufla89
        type: string
    type: object
  entity.UserDTO:
    properties:
      id:
        example: 1
        type: integer
      username:
        example: Pantufla89
        type: string
    type: object
  entity.UserTokenDTO:
    properties:
      token:
        example: eyJhbGciOiJ...
        type: string
      tokenSwagger:
        example: Bearer eyJhbGciOiJ...
        type: string
      userID:
        example: 1
        type: integer
      username:
        example: Pantufla89
        type: string
    type: object
  entity.WishList:
    properties:
      name:
        example: MyFirstWishList
        type: string
    type: object
  entity.WishListDTO:
    properties:
      books:
        items:
          $ref: '#/definitions/entity.Book'
        type: array
      createdAt:
        example: "2022-06-24T19:38:46.814728Z"
        type: string
      id:
        example: 1
        type: integer
      name:
        example: MyFirstWishList
        type: string
      userId:
        example: 1
        type: integer
    type: object
info:
  contact:
    email: alfred.7790@gmail.com
    name: API Support
  description: Google Books testcase API
  title: Google Books API - TESTCASE
  version: "1.0"
paths:
  /v1/books:
    get:
      description: List of books from google
      parameters:
      - description: terms (Author, Title, Publisher)
        in: query
        name: terms
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.BooksDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.FailureResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.FailureResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/entity.FailureResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/entity.FailureResponse'
      security:
      - APIToken: []
      summary: returns a list of books from google books
      tags:
      - Books
  /v1/login:
    post:
      description: Used login and get a new token
      parameters:
      - description: username and password
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/entity.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.UserTokenDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.FailureResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/entity.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.FailureResponse'
      summary: returns a new token
      tags:
      - Auth
  /v1/users:
    post:
      description: Used to create a new user
      parameters:
      - description: struct to create a new user
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/entity.User'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.UserDTO'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.FailureResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/entity.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.FailureResponse'
      summary: returns details about a new user was created
      tags:
      - Users
  /v1/wishlists:
    get:
      description: List of books from google saved in datastore
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.WishListDTO'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.FailureResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.FailureResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/entity.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.FailureResponse'
      security:
      - APIToken: []
      summary: returns wishlist of books
      tags:
      - Books
    post:
      description: Used to create a wish list
      parameters:
      - description: struct to create a new wishlist
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/entity.WishList'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.FailureResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.FailureResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/entity.FailureResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/entity.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.FailureResponse'
      security:
      - APIToken: []
      summary: create or update a wish list for books
      tags:
      - Books
  /v1/wishlists/{id}/books:
    post:
      description: adding a book into a wishlist and creating a new book if it doesn't
        exist
      parameters:
      - description: WishListID
        in: path
        name: id
        required: true
        type: integer
      - description: struct to add a book to wishlist
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/entity.Book'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.FailureResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.FailureResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/entity.FailureResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/entity.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.FailureResponse'
      security:
      - APIToken: []
      summary: adding a book into a wishlist
      tags:
      - Books
  /v1/wishlists/{id}/books/{bookid}:
    delete:
      description: removing a book from wishlist if it exists
      parameters:
      - description: WishListID
        in: path
        name: id
        required: true
        type: integer
      - description: BookID
        in: path
        name: bookid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.SuccessResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/entity.FailureResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/entity.FailureResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/entity.FailureResponse'
        "409":
          description: Conflict
          schema:
            $ref: '#/definitions/entity.FailureResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/entity.FailureResponse'
      security:
      - APIToken: []
      summary: removing a book from wishlist
      tags:
      - Books
securityDefinitions:
  APIToken:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
